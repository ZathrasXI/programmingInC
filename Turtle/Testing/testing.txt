--Overall approach--
My approach to testing was influenced by two concepts from the Software Testing domain: 
- the Testing Pyramid – where the majority of the testing is covered by unit tests, then testing of multiple units integrated, and a few end-to-end tests.
- the Arrange, Act, Assert (AAA) approach – structuring the tests so that they conform to having a setup stage, and action stage, followed by asserting that the actions created specific results. I found this helped me to have clearly defined test cases.


--Test coverage--
I used `gcov`, built in to gcc, to measure the code covered by the unit tests.
gcov reports that coverage of:
- the parser is 95%
- the interp is %
- the extension is %

It isn’t possible to achieve 100% coverage from assert testing alone, because some paths through the code are impossible to test within the program. For example, there are many scenarios that cause the program to exit, which would cease all testing. There are also scenarios that are hard to replicated, such as causing memory allocation to fail. To try and cover the remaining tests cases I used bash scripts and manually “uncommenting” assert tests that force the program to exit.
These tests within the interpreter are commented out, and I run them manually:
- pop_test1 within  test_stack()
- stack_word within test_stack()
- type_not_in_use within test_stack()

Example usage for `gcov`:
```
gcc -fprofile-arcs -ftest-coverage -o parse parse.c
./parse
gcov parse.c 
```
I have written a test_gcov.sh bash script that executes these commands against the parser and interpeter.


--Implementation of integration and end-to-end testing--
Testing the combination of many function calls, and the output of the entire program provided me with insight into state of the software as a whole. Examples of tests at this scope are:
- the `is_prog()`, `is_loop()`, or `is_inslst()` tests in the parser
- the collection of tests within `test_ingtegration()`, test_interp.c
- `Extension/test_multiple_files.sh` 

The downside of this scope is that these tests didn’t always highlight where inside the “black box”, something is broken, but this is where the above mentioned unit tests are valuable. 






